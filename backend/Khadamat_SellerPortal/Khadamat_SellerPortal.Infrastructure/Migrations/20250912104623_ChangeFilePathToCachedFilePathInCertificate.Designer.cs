// <auto-generated />
using System;
using Khadamat_SellerPortal.Infrastructure.Common.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Khadamat_SellerPortal.Infrastructure.Migrations
{
    [DbContext(typeof(Khadamat_SellerPortalDbContext))]
    [Migration("20250912104623_ChangeFilePathToCachedFilePathInCertificate")]
    partial class ChangeFilePathToCachedFilePathInCertificate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Khadamat_SellerPortal.Domain.Common.Entities.CertificateEntity.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CachedFilePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("EducationId")
                        .HasColumnType("int");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkExperienceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EducationId")
                        .IsUnique()
                        .HasFilter("[EducationId] IS NOT NULL");

                    b.HasIndex("WorkExperienceId");

                    b.ToTable("Certificates", (string)null);
                });

            modelBuilder.Entity("Khadamat_SellerPortal.Domain.Common.Entities.EducationEntity.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Degree")
                        .HasColumnType("int");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsGraduated")
                        .HasColumnType("bit");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("Educations", (string)null);
                });

            modelBuilder.Entity("Khadamat_SellerPortal.Domain.Common.Entities.PortfolioUrlEntity.PortfolioUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("PortfolioUrls", (string)null);
                });

            modelBuilder.Entity("Khadamat_SellerPortal.Domain.Common.Entities.SocialMediaLinkEntity.SocialMediaLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("SocialMediaLinks", (string)null);
                });

            modelBuilder.Entity("Khadamat_SellerPortal.Domain.Common.Entities.WorkExperienceEntity.WorkExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("WorkExperiences", (string)null);
                });

            modelBuilder.Entity("Khadamat_SellerPortal.Domain.SellerAggregate.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Sellers");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Khadamat_SellerPortal.Infrastructure.IntegrationEvents.OutboxIntegrationEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EventContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("OutboxIntegrationEvents");
                });

            modelBuilder.Entity("Khadamat_SellerPortal.Domain.OfflineSellerAggregate.OfflineSeller", b =>
                {
                    b.HasBaseType("Khadamat_SellerPortal.Domain.SellerAggregate.Seller");

                    b.ToTable("OfflineSellers", (string)null);
                });

            modelBuilder.Entity("Khadamat_SellerPortal.Domain.OnlineSellerAggregate.OnlineSeller", b =>
                {
                    b.HasBaseType("Khadamat_SellerPortal.Domain.SellerAggregate.Seller");

                    b.ToTable("OnlineSellers", (string)null);
                });

            modelBuilder.Entity("Khadamat_SellerPortal.Domain.Common.Entities.CertificateEntity.Certificate", b =>
                {
                    b.HasOne("Khadamat_SellerPortal.Domain.Common.Entities.EducationEntity.Education", null)
                        .WithOne("EducationCertificate")
                        .HasForeignKey("Khadamat_SellerPortal.Domain.Common.Entities.CertificateEntity.Certificate", "EducationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Khadamat_SellerPortal.Domain.Common.Entities.WorkExperienceEntity.WorkExperience", null)
                        .WithMany("Certificates")
                        .HasForeignKey("WorkExperienceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Khadamat_SellerPortal.Domain.Common.Entities.EducationEntity.Education", b =>
                {
                    b.HasOne("Khadamat_SellerPortal.Domain.SellerAggregate.Seller", null)
                        .WithMany("Educations")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Khadamat_SellerPortal.Domain.Common.ValueObjects.DateRange", "AttendancePeriod", b1 =>
                        {
                            b1.Property<int>("EducationId")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("End")
                                .HasColumnType("datetime2")
                                .HasColumnName("End");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime2")
                                .HasColumnName("Start");

                            b1.HasKey("EducationId");

                            b1.ToTable("Educations");

                            b1.WithOwner()
                                .HasForeignKey("EducationId");
                        });

                    b.Navigation("AttendancePeriod");
                });

            modelBuilder.Entity("Khadamat_SellerPortal.Domain.Common.Entities.PortfolioUrlEntity.PortfolioUrl", b =>
                {
                    b.HasOne("Khadamat_SellerPortal.Domain.SellerAggregate.Seller", null)
                        .WithMany("PortfolioUrls")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Khadamat_SellerPortal.Domain.Common.Entities.SocialMediaLinkEntity.SocialMediaLink", b =>
                {
                    b.HasOne("Khadamat_SellerPortal.Domain.SellerAggregate.Seller", null)
                        .WithMany("SocialMediaLinks")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Khadamat_SellerPortal.Domain.Common.Entities.WorkExperienceEntity.WorkExperience", b =>
                {
                    b.HasOne("Khadamat_SellerPortal.Domain.SellerAggregate.Seller", null)
                        .WithMany("WorkExperiences")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Khadamat_SellerPortal.Domain.Common.ValueObjects.DateRange", "Range", b1 =>
                        {
                            b1.Property<int>("WorkExperienceId")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("End")
                                .HasColumnType("datetime2")
                                .HasColumnName("EndDate");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime2")
                                .HasColumnName("StartDate");

                            b1.Property<bool>("UntilNow")
                                .HasColumnType("bit")
                                .HasColumnName("UntilNow");

                            b1.HasKey("WorkExperienceId");

                            b1.ToTable("WorkExperiences");

                            b1.WithOwner()
                                .HasForeignKey("WorkExperienceId");
                        });

                    b.Navigation("Range")
                        .IsRequired();
                });

            modelBuilder.Entity("Khadamat_SellerPortal.Domain.SellerAggregate.Seller", b =>
                {
                    b.OwnsOne("Khadamat_SellerPortal.Domain.Common.ValueObjects.SellerPersonalDetails", "PersonalDetails", b1 =>
                        {
                            b1.Property<int>("SellerId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("DateOfBirth")
                                .HasColumnType("datetime2")
                                .HasColumnName("DateOfBirth");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("nvarchar(250)")
                                .HasColumnName("Email");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("LastName");

                            b1.Property<string>("NationalNo")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("NationalNo");

                            b1.Property<string>("SecondName")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("SecondName");

                            b1.HasKey("SellerId");

                            b1.ToTable("Sellers");

                            b1.WithOwner()
                                .HasForeignKey("SellerId");

                            b1.OwnsOne("Khadamat_SellerPortal.Domain.Common.ValueObjects.SellerAddress", "Address", b2 =>
                                {
                                    b2.Property<int>("SellerPersonalDetailsSellerId")
                                        .HasColumnType("int");

                                    b2.Property<string>("City")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("City");

                                    b2.Property<string>("Country")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("Country");

                                    b2.Property<string>("Region")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)")
                                        .HasColumnName("Region");

                                    b2.HasKey("SellerPersonalDetailsSellerId");

                                    b2.ToTable("Sellers");

                                    b2.WithOwner()
                                        .HasForeignKey("SellerPersonalDetailsSellerId");
                                });

                            b1.Navigation("Address")
                                .IsRequired();
                        });

                    b.Navigation("PersonalDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("Khadamat_SellerPortal.Domain.OfflineSellerAggregate.OfflineSeller", b =>
                {
                    b.HasOne("Khadamat_SellerPortal.Domain.SellerAggregate.Seller", null)
                        .WithOne()
                        .HasForeignKey("Khadamat_SellerPortal.Domain.OfflineSellerAggregate.OfflineSeller", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Khadamat_SellerPortal.Domain.OnlineSellerAggregate.OnlineSeller", b =>
                {
                    b.HasOne("Khadamat_SellerPortal.Domain.SellerAggregate.Seller", null)
                        .WithOne()
                        .HasForeignKey("Khadamat_SellerPortal.Domain.OnlineSellerAggregate.OnlineSeller", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Khadamat_SellerPortal.Domain.Common.Entities.EducationEntity.Education", b =>
                {
                    b.Navigation("EducationCertificate");
                });

            modelBuilder.Entity("Khadamat_SellerPortal.Domain.Common.Entities.WorkExperienceEntity.WorkExperience", b =>
                {
                    b.Navigation("Certificates");
                });

            modelBuilder.Entity("Khadamat_SellerPortal.Domain.SellerAggregate.Seller", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("PortfolioUrls");

                    b.Navigation("SocialMediaLinks");

                    b.Navigation("WorkExperiences");
                });
#pragma warning restore 612, 618
        }
    }
}
